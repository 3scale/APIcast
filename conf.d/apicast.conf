set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV");';

set $backend_host 'backend';
set $backend_endpoint 'http://127.0.0.1:3001';

location = /threescale_authrep {
  internal;

  proxy_pass_request_headers off;
  proxy_pass $backend_endpoint/transactions/authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials; # &log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  X-3scale-User-Agent "nginx$deployment";
  proxy_set_header  X-3scale-Version "2016-08-29T08:09:01Z";

  log_by_lua_block {
    ngx.log(ngx.INFO, '[authrep] ' .. ngx.var.request_uri .. ' ' .. ngx.var.status)
  }
}


location = /out_of_band_authrep_action {
  internal;

  proxy_pass_request_headers off;

  content_by_lua_block { require('provider').post_action_content() }
}

location / {
  set $provider_key null;
  set $cached_key null;
  set $credentials null;
  set $usage null;
  set $service_id null;
  set $proxy_pass null;
  set $secret_token null;
  set $resp_body null;
  set $resp_headers null;
  set $backend_authentication_type null;
  set $backend_authentication_value null;

  proxy_ignore_client_abort on;

  access_by_lua_block {
    local configuration = require('configuration')
    local provider = require('provider')

    local config = configuration.boot()

    provider.init(config)
    provider.access()
}

  body_filter_by_lua_block {
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)

    if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
    end
  }

  header_filter_by_lua_block {
    ngx.var.resp_headers = require('cjson').encode(ngx.resp.get_headers())
  }

  proxy_pass $proxy_pass;
  proxy_set_header X-Real-IP  $remote_addr;
  # proxy_set_header Host $host; # TODO: Host header override
  proxy_set_header X-3scale-proxy-secret-token $secret_token;

  post_action /out_of_band_authrep_action;
}
