## NEED CHANGE (defines the user of the nginx workers)
# user user group;

##Â THIS PARAMETERS BE SAFELY OVER RIDDEN BY YOUR DEFAULT NGINX CONF
worker_processes 1;
env THREESCALE_DEPLOYMENT_ENV;

# error_log stderr notice;
# error_log logs/error.log warn;

events {
    worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;
  server_names_hash_bucket_size 128;

  error_log stderr info;
  access_log /dev/stdout combined;

  lua_package_path ";;${prefix}?.lua;${prefix}src/?.lua";

  # Enabling the Lua code cache is strongly encouraged for production use. Here it is enabled by default for testing and development purposes
  lua_code_cache off;

  init_by_lua_block {
    require('luarocks.loader')
    require('provider').init()
  }

  init_worker_by_lua_block {
    require('provider').init()
  }

  resolver 8.8.8.8 8.8.4.4;


  server {
    listen 8081;

    server_name backend;

    location / {
      echo "hello, world!";
    }
  }

  server {
    listen 8080;

    server_name _;
    underscores_in_headers on;

    set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV");';

    location = /threescale_authrep {
      internal;

      set $backend_host 'backend';
      set $backend_endpoint 'http://127.0.0.1:3001';

      proxy_pass_request_headers off;
      proxy_pass $backend_endpoint/transactions/authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials; # &log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
      proxy_set_header  Host  "$backend_host";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
      proxy_set_header  X-3scale-Version "2016-08-29T08:09:01Z";

      log_by_lua_block {
        print('foo')
        ngx.log(ngx.INFO, '[authrep] ' .. ngx.var.request_uri .. ' ' .. ngx.var.status)
      }
  }


    location = /out_of_band_authrep_action {
      internal;

      proxy_pass_request_headers off;

      content_by_lua_block { require('provider').post_action_content() }
    }


    location / {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id null;
      set $proxy_pass null;
      set $secret_token null;
      set $resp_body null;
      set $resp_headers null;
      set $backend_authentication_type null;
      set $backend_authentication_value null;

      proxy_ignore_client_abort on;

      access_by_lua_block { require('provider').access() }

      body_filter_by_lua_block {
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)
        if ngx.arg[2] then ngx.var.resp_body = ngx.ctx.buffered end
      }

      header_filter_by_lua_block {
        ngx.var.resp_headers = require('cjson').encode(ngx.resp.get_headers())
      }

      proxy_pass $proxy_pass;
      proxy_set_header X-Real-IP  $remote_addr;
      # proxy_set_header Host $host; # TODO: Host header override
      proxy_set_header X-3scale-proxy-secret-token $secret_token;

      post_action /out_of_band_authrep_action;
    }
  }
}
