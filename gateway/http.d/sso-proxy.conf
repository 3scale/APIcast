server {
  # Yes, this is a copy / past from apicast.d/ssl.conf
  # But, for now the lua-liquid module does not allow to have recursive includes
  #
  # BEGIN COPY/PASTE
  {% assign ssl_port = ssl_port |default: 8442 |plus: 1 %}
  listen {{ ssl_port }} ssl;

  ssl on;
  ssl_certificate {{ prefix }}/conf/serving-cert/tls.crt;
  ssl_certificate_key {{ prefix }}/conf/serving-cert/tls.key;

  # Enable SSL/TLS Client Certificates Authentication
  ssl_verify_client optional;
  ssl_client_certificate "{{ ca_bundle | default: 'ca-bundle.crt' }}";
  ssl_crl "{{ ssl_crl_file | default: 'crl.pem' }}";
  # END COPY/PASTE

  server_name {{ sso_front_hostname }};

  location ~ ^/auth/realms/({{ sso_realms_to_protect }})/protocol/openid-connect/token$ {
    rewrite_by_lua_block { require('custom.validation.executor'):rewrite() }
    access_by_lua_block { require('custom.validation.executor'):access() }
    body_filter_by_lua_block { require('custom.validation.executor'):body_filter() }
    header_filter_by_lua_block { require('custom.validation.executor'):header_filter() }
    content_by_lua_block { require('custom.validation.executor'):content() }
  }

  # Catch-all location directive
  location ~ ^/.* {
    # Beware: no slash at the end of the proxy_pass directive since we don't want to rewrite URLs
    proxy_pass https://{{ sso_back_hostname }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
