{
  "$schema": "http://apicast.io/policy-v1/schema#manifest#",
  "name": "Rate Limit",
  "summary": "Adds rate limit.",
  "description": ["This policy adds rate limit."],
  "version": "builtin",
  "configuration": {
    "type": "object",
    "properties": {
      "limiters": {
        "description": "List of limiters to be applied",
        "type": "array",
        "items": {
          "anyOf": [{
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": ["connections"],
                "description": "Limiting request concurrency (or concurrent connections)"
              },
              "key": {
                "description": "The key corresponding to the limiter object",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the key, must be unique in the scope"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Scope of the key",
                    "default": "service",
                    "oneOf": [{
                      "enum": ["global"],
                      "description": "Global scope, affecting to all services"
                    }, {
                      "enum": ["service"],
                      "description": "Service scope, affecting to one service"
                    }]
                  }
                }
              },
              "conn": {
                "type": "integer",
                "description": "The maximum number of concurrent requests allowed",
                "exclusiveminimum": 0
              },
              "burst": {
                "type": "integer",
                "description": "The number of excessive concurrent requests (or connections) allowed to be delayed",
                "minimum": 0
              },
              "delay": {
                "type": "number",
                "description": "The default processing latency of a typical connection (or request)",
                "exclusiveMinimum": 0
              }
            }
          }, {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": ["leaky_bucket"],
                "description": "Limiting request rate"
              },
              "key": {
                "description": "The key corresponding to the limiter object",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the key, must be unique in the scope"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Scope of the key",
                    "default": "service",
                    "oneOf": [{
                      "enum": ["global"],
                      "description": "Global scope, affecting to all services"
                    }, {
                      "enum": ["service"],
                      "description": "Service scope, affecting to one service"
                    }]
                  }
                }
              },
              "rate": {
                "type": "integer",
                "description": "The specified request rate (number per second) threshold",
                "exclusiveMinimum": 0
              },
              "burst": {
                "type": "integer",
                "description": "The number of excessive requests per second allowed to be delayed",
                "minimum": 0
              }
            }
          }, {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": ["fixed_window"],
                "description": "Limiting request counts"
              },
              "key": {
                "description": "The key corresponding to the limiter object",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the key, must be unique in the scope"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Scope of the key",
                    "default": "service",
                    "oneOf": [{
                      "enum": ["global"],
                      "description": "Global scope, affecting to all services"
                    }, {
                      "enum": ["service"],
                      "description": "Service scope, affecting to one service"
                    }]
                  }
                }
              },
              "count": {
                "type": "integer",
                "description": "The specified number of requests threshold",
                "exclusiveMinimum": 0
              },
              "window": {
                "type": "integer",
                "description": "The time window in seconds before the request count is reset",
                "exclusiveMinimum": 0
              }
            }
          }]
        }
      },
      "redis_url": {
        "description": "URL of Redis",
        "type": "string"
      },
      "error_settings": {
        "description": "List of error settings",
        "type": "array",
        "items": {
          "anyOf": [{
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["limits_exceeded"],
                "description": "The error setting when requests over the limit"
              },
              "status_code": {
                "type": "integer",
                "description": "The status code when requests over the limit",
                "default": 429
              },
              "error_handling": {
                "type": "string",
                "description": "How to handle an error",
                "default": "exit",
                "oneOf": [{
                  "enum": ["exit"],
                  "description": "Respond with an error"
                }, {
                  "enum": ["log"],
                  "description": "Let the request go through and only output logs"
                }]
              }
            }
          }, {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["configuration_issue"],
                "description": "The error setting when there is some configuration issue"
              },
              "status_code": {
                "type": "integer",
                "description": "The status code when there is some configuration issue",
                "default": 500
              },
              "error_handling": {
                "type": "string",
                "description": "How to handle an error",
                "default": "exit",
                "oneOf": [{
                  "enum": ["exit"],
                  "description": "Respond with an error"
                }, {
                  "enum": ["log"],
                  "description": "Let the request go through and only output logs"
                }]
              }
            }
          }]
        }
      }
    }
  }
}
