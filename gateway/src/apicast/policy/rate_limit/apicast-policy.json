{
  "$schema": "http://apicast.io/policy-v1/schema#manifest#",
  "name": "rate limit policy",
  "summary": "Adds rate limit.",
  "description": ["This policy adds rate limit."],
  "version": "builtin",
  "configuration": {
    "type": "object",
    "properties": {
      "connection_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "description": "The key corresponding to the limiter object",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the key, must be unique in the scope"
                },
                "scope": {
                  "type": "string",
                  "description": "Scope of the key",
                  "default": "global",
                  "oneOf": [{
                    "enum": ["global"],
                    "description": "Global scope, affecting to all services"
                  }, {
                    "enum": ["service"],
                    "description": "Service scope, affecting to one service"
                  }]
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of service, necessary for service scope"
                }
              }
            },
            "conn": {
              "type": "integer",
              "description": "The maximum number of concurrent requests allowed",
              "exclusiveminimum": 0
            },
            "burst": {
              "type": "integer",
              "description": "The number of excessive concurrent requests (or connections) allowed to be delayed",
              "minimum": 0
            },
            "delay": {
              "type": "number",
              "description": "The default processing latency of a typical connection (or request)",
              "exclusiveMinimum": 0
            }
          }
        }
      },
      "leaky_bucket_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "description": "The key corresponding to the limiter object",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the key, must be unique in the scope"
                },
                "scope": {
                  "type": "string",
                  "description": "Scope of the key",
                  "default": "global",
                  "oneOf": [{
                    "enum": ["global"],
                    "description": "Global scope, affecting to all services"
                  }, {
                    "enum": ["service"],
                    "description": "Service scope, affecting to one service"
                  }]
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of service, necessary for service scope"
                }
              }
            },
            "rate": {
              "type": "integer",
              "description": "The specified request rate (number per second) threshold",
              "exclusiveMinimum": 0
            },
            "burst": {
              "type": "integer",
              "description": "The number of excessive requests per second allowed to be delayed",
              "minimum": 0
            }
          }
        }
      },
      "fixed_window_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "description": "The key corresponding to the limiter object",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the key, must be unique in the scope"
                },
                "scope": {
                  "type": "string",
                  "description": "Scope of the key",
                  "default": "global",
                  "oneOf": [{
                    "enum": ["global"],
                    "description": "Global scope, affecting to all services"
                  }, {
                    "enum": ["service"],
                    "description": "Service scope, affecting to one service"
                  }]
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of service, necessary for service scope"
                }
              }
            },
            "count": {
              "type": "integer",
              "description": "The specified number of requests threshold",
              "exclusiveMinimum": 0
            },
            "window": {
              "type": "integer",
              "description": "The time window in seconds before the request count is reset",
              "exclusiveMinimum": 0
            }
          }
        }
      },
      "redis_url": {
        "description": "URL of Redis",
        "type": "string"
      },
      "limits_exceeded_error": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The status code when requests over the limit",
            "default": 429
          },
          "error_handling": {
            "type": "string",
            "description": "How to handle an error",
            "default": "exit",
            "oneOf": [{
              "enum": ["exit"],
              "description": "Respond with an error"
            }, {
              "enum": ["log"],
              "description": "Let the request go through and only output logs"
            }]
          }
        }
      },
      "configuration_error": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The status code when there is some configuration issue",
            "default": 500
          },
          "error_handling": {
            "type": "string",
            "description": "How to handle an error",
            "default": "exit",
            "oneOf": [
              {
                "enum": [
                  "exit"
                ],
                "description": "Respond with an error"
              },
              {
                "enum": [
                  "log"
                ],
                "description": "Let the request go through and only output logs"
              }
            ]
          }
        }
      }
    }
  }
}
