{
  "$schema": "http://apicast.io/policy-v1/schema#manifest#",
  "name": "Rate Limit",
  "summary": "Adds rate limit.",
  "description": ["This policy adds rate limit."],
  "version": "builtin",
  "configuration": {
    "type": "object",
    "definitions": {
      "key": {
        "$id": "#/definitions/key",
        "description": "The key corresponding to the limiter object",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the key, must be unique in the scope"
          },
          "name_type": {
            "description": "How to evaluate 'name'",
            "type": "string",
            "default": "plain",
            "oneOf": [{
              "enum": ["plain"],
              "title": "Evaluate 'name' as plain text."
            }, {
              "enum": ["liquid"],
              "title": "Evaluate 'name' as liquid."
            }]
          },
          "conditions": {
            "description": "Conditions to apply the rate limit",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "operator": {
                  "description": "Operator of evaluate condition",
                  "type": "string",
                  "enum": ["equals", "not_equals", "contains", "not_contains",
                    "greater_than", "greater_than_or_equals", "less_than",
                    "less_than_or_equals"
                  ]
                },
                "value": {
                  "description": "Value of evaluate condition",
                  "type": "string"
                },
                "value_type": {
                  "description": "How to evaluate 'value'",
                  "type": "string",
                  "default": "plain",
                  "oneOf": [{
                    "enum": ["plain"],
                    "title": "Evaluate 'value' as plain text."
                  }, {
                    "enum": ["liquid"],
                    "title": "Evaluate 'value' as liquid."
                  }]
                }
              }
            }
          },
          "conditions_combination": {
            "description": "How to combine conditions, if using multiple conditions",
            "type": "string",
            "enum": ["and", "or"]
          },
          "scope": {
            "type": "string",
            "description": "Scope of the key",
            "default": "service",
            "oneOf": [{
              "enum": ["global"],
              "description": "Global scope, affecting to all services"
            }, {
              "enum": ["service"],
              "description": "Service scope, affecting to one service"
            }]
          }
        }
      },
      "error_handling": {
        "$id": "#/definitions/error_handling",
        "type": "string",
        "description": "How to handle an error",
        "default": "exit",
        "oneOf": [{
          "enum": ["exit"],
          "description": "Respond with an error"
        }, {
          "enum": ["log"],
          "description": "Let the request go through and only output logs"
        }]
      }
    },
    "properties": {
      "connection_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "$ref": "#/definitions/key"
            },
            "conn": {
              "type": "integer",
              "description": "The maximum number of concurrent requests allowed",
              "exclusiveminimum": 0
            },
            "burst": {
              "type": "integer",
              "description": "The number of excessive concurrent requests (or connections) allowed to be delayed",
              "minimum": 0
            },
            "delay": {
              "type": "number",
              "description": "The default processing latency of a typical connection (or request)",
              "exclusiveMinimum": 0
            }
          }
        }
      },
      "leaky_bucket_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "$ref": "#/definitions/key"
            },
            "rate": {
              "type": "integer",
              "description": "The specified request rate (number per second) threshold",
              "exclusiveMinimum": 0
            },
            "burst": {
              "type": "integer",
              "description": "The number of excessive requests per second allowed to be delayed",
              "minimum": 0
            }
          }
        }
      },
      "fixed_window_limiters": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "$ref": "#/definitions/key"
            },
            "count": {
              "type": "integer",
              "description": "The specified number of requests threshold",
              "exclusiveMinimum": 0
            },
            "window": {
              "type": "integer",
              "description": "The time window in seconds before the request count is reset",
              "exclusiveMinimum": 0
            }
          }
        }
      },
      "redis_url": {
        "description": "URL of Redis",
        "type": "string"
      },
      "limits_exceeded_error": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The status code when requests over the limit",
            "default": 429
          },
          "error_handling": {
            "$ref": "#/definitions/error_handling"
          }
        }
      },
      "configuration_error": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The status code when there is some configuration issue",
            "default": 500
          },
          "error_handling": {
            "$ref": "#/definitions/error_handling"
          }
        }
      }
    }
  }
}
