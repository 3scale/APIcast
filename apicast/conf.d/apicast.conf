set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV");';

location = /threescale_authrep {
  internal;

  proxy_pass_request_headers off;
  proxy_pass $backend_endpoint/transactions/authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials; # &log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  X-3scale-User-Agent "nginx$deployment";
  proxy_set_header  X-3scale-Version "$version";

  log_by_lua_block {
    ngx.log(ngx.INFO, '[authrep] ' .. ngx.var.request_uri .. ' ' .. ngx.var.status)
  }
}


location @out_of_band_authrep_action {
  internal;

  proxy_pass_request_headers off;

  content_by_lua_block { require('provider').post_action_content() }
}

location / {
  set $cached_key null;
  set $credentials null;
  set $usage null;
  set $service_id null;
  set $proxy_pass null;
  set $secret_token null;
  set $resp_body null;
  set $resp_headers null;

  set $backend_host 'backend';
  set $backend_endpoint 'http://127.0.0.1:8081';
  set $backend_authentication_type null;
  set $backend_authentication_value null;
  set $version null;

  proxy_ignore_client_abort on;

  access_by_lua_block {
    local configuration = require('configuration')
    local provider = require('provider')

    local config = configuration.boot()

    provider.init(config)
    provider.access()
}

  body_filter_by_lua_block {
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)

    if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
    end
  }

  header_filter_by_lua_block {
    ngx.var.resp_headers = require('cjson').encode(ngx.resp.get_headers())
  }

  proxy_pass $proxy_pass;
  proxy_set_header X-Real-IP  $remote_addr;
  proxy_set_header Host $http_host;
  proxy_set_header X-3scale-proxy-secret-token $secret_token;
  proxy_set_header X-3scale-debug "";

  post_action @out_of_band_authrep_action;
}

location /authorize {
  set $red_url "";
  set $client_id "";
  set $login_url "<%= server.login_url %>"; # CHANGE HERE: put your login url here
  set $service_id "<%= server.service_id %>"; # CHANGE HERE: put your login url here
  proxy_set_header  Content-Type "application/x-www-form-urlencoded";
  content_by_lua_block { require('authorize').call() }
}

location = /_threescale/oauth_store_token {
  internal;
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

  proxy_pass $backend_endpoint/services/$service_id/oauth_access_tokens.xml?$backend_authentication_type=$backend_authentication_value;
}

location = /_threescale/redirect_uri_matches {
  internal;
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

  proxy_pass $backend_endpoint/transactions/oauth_authorize.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&app_id=$client_id&redirect_url=$red_url;
}

location /_threescale/toauth_authorize {
  internal; # changed, wasnt before

  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  Host "su1.3scale.net" ;
  proxy_set_header  X-3scale-User-Agent "nginx$deployment";

  proxy_ignore_client_abort on;
  proxy_pass $backend_endpoint/transactions/oauth_authorize.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&access_token=$arg_access_token&$usage;
}

location = /_threescale/check_credentials {
  internal;

  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

  proxy_pass $backend_endpoint/transactions/oauth_authorize.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$args;
}

location = /threescale_oauth_authrep {
  internal;
  proxy_set_header  Host  "su1.3scale.net";
  proxy_set_header  X-3scale-User-Agent "nginx$deployment";
  proxy_set_header  X-3scale-OAuth2-Grant-Type "authorization_code";

  proxy_pass $backend_endpoint/transactions/oauth_authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
}

location = /_threescale/client_secret_matches {
  internal;
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

  proxy_pass $backend_endpoint/transactions/oauth_authorize.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&app_id=$client_id;
}

location /callback {
  set $service_id null;
  content_by_lua_block { require('authorized_callback').call() }
}

# this returns access_token that is later used in authorize call to 3scale backend
location /oauth/token  {
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  Host $http_host;
  proxy_set_header  Content-Type "application/x-www-form-urlencoded";
  content_by_lua_block { require('get_token').call() }
}

location = /out_of_band_oauth_authrep_action {
  internal;
  proxy_pass_request_headers off;

  content_by_lua_block {
    local method, path, headers = ngx.req.get_method(), ngx.var.request_uri, ngx.req.get_headers()

    local req = cjson.encode{method=method, path=path, headers=headers}
    local resp = cjson.encode{ body = ngx.var.resp_body, headers = cjson.decode(ngx.var.resp_headers)}

    local cached_key = ngx.var.cached_key
    if cached_key ~= nil and cached_key ~= "null" then
      local status_code = ngx.var.status
      local res1 = ngx.location.capture("/threescale_oauth_authrep?code=".. status_code .. "&req=" .. ngx.escape_uri(req) .. "&resp=" .. ngx.escape_uri(resp), { share_all_vars = true })
      if res1.status ~= 200 then
        local api_keys = ngx.shared.api_keys
        api_keys:delete(cached_key)
      end
    end

    ngx.exit(ngx.HTTP_OK)
  }
}
